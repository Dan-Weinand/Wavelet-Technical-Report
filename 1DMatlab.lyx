#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass spie
\use_default_options true
\master TechReportAMALTHEA.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes true
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author 236236747 "mmoyou" 
\end_header

\begin_body

\begin_layout Section
Matlab Prototypes
\end_layout

\begin_layout Standard
In coding the 1-dimensional streaming data density estimator we used Mark
 Moyou and Eddy Ihou's architecture, illustrated in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Density-Estimation-Process"

\end_inset

.
 The 2-dimensional prototype kept this architecture and file structure,
 only incorporating some minor optimizations to making working in higher
 dimensions more manageable.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Matlab Architecture.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Density Estimation Process
\begin_inset CommandInset label
LatexCommand label
name "fig:Density-Estimation-Process"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Obtain Samples
\end_layout

\begin_layout Standard
We assume that data has been collected previously and processed into a set
 with uniform ranges across dimensions.
 It is likewise assumed that the maximum and minimum range for the data
 (or at least the desired support) is known.
\end_layout

\begin_layout Subsection
Calculate Valid translates
\change_inserted 236236747 1404748159

\begin_inset CommandInset label
LatexCommand label
name "sub:Calculate-Valid-translates"

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard
The dyadic Discrete Wavelet Transform (DWT) assumes wavelet functions (father
 and mother) of the form:
\begin_inset Formula 
\[
\varphi_{j,k}(x)=2^{j/2}\varphi(2^{j}x-k)
\]

\end_inset

 where 
\begin_inset Formula $j,k\in\mathbb{{Z}}$
\end_inset

 and 
\begin_inset Formula $\varphi$
\end_inset

 refers to both the father and the mother wavelet functions.
\end_layout

\begin_layout Standard
Also, the majority of the wavelet families used in this implementation of
 the density estimator have a defined support of 
\begin_inset Formula $[0,2N-1]$
\end_inset

 where 
\begin_inset Formula $N$
\end_inset

 is the order of the wavelet.
 For example, 
\begin_inset Formula $"db6"$
\end_inset

 (Daubechies wavelet family) is of order 6 and therefore its support is
 
\begin_inset Formula $[0,11]$
\end_inset

.
 For the wavelet function 
\begin_inset Formula $\varphi_{j,k}(x)$
\end_inset

 to be evaluated at a given point, its argument 
\begin_inset Formula $2^{j}x-k$
\end_inset

 has to lie within its support.
 That is:
\begin_inset Formula 
\[
0\le2^{j}x-k\le2N-1
\]

\end_inset

 Solving for 
\begin_inset Formula $k$
\end_inset

, we obtain:
\begin_inset Formula 
\[
2^{j}x-2N+1\le k\le2^{j}x
\]

\end_inset

 Therefore, if the support of the density function is given as 
\begin_inset Formula $[a,b]$
\end_inset

 and the order of the wavelet 
\begin_inset Formula $N$
\end_inset

 is known, the valid translates 
\begin_inset Formula $k$
\end_inset

 will meet the condition
\begin_inset Formula 
\begin{equation}
\lceil2^{j}a\rceil-2N+1\le k\le\lfloor2^{j}b\rfloor\label{eq:Valid translates def}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsection
Estimate Coefficients
\change_inserted 236236747 1404748152

\begin_inset CommandInset label
LatexCommand label
name "sub:Estimate-Coefficients"

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard
The bulk of the coding complexity falls into this section.
 All the coefficients are initialized at zero and then begin to build up
 from there as described in equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Decay Update"

\end_inset

) and (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Window update"

\end_inset

).
 We support two methods for updating the coefficients: the sliding window
 method 
\begin_inset CommandInset citation
LatexCommand cite
key "Trevino12"

\end_inset

 as well as the decaying method 
\begin_inset CommandInset citation
LatexCommand cite
key "Wegman06"

\end_inset

.
 
\end_layout

\begin_layout Standard
The sliding window method considers only a finite section of the total data
 set at a time in order to estimate the density function.
 When a data point leaves the data set, it subtracts from the coefficients
 the exact amount which it originally added to them.
 Given the coefficient at the previous time step 
\begin_inset Formula $\hat{b}_{j,n}$
\end_inset

, the window size 
\begin_inset Formula $w$
\end_inset

, and both the entering (
\begin_inset Formula $X_{n+1}$
\end_inset

) and leaving (
\begin_inset Formula $X_{n-w+1}$
\end_inset

) data points, the coefficient at the next step is readily calculated by:
\begin_inset Formula 
\[
\hat{b}_{j,n+1}=\hat{b}_{j,n}+\frac{\varphi(X_{n+1})}{w}-\frac{\varphi(X_{n-w+1})}{w}
\]

\end_inset


\end_layout

\begin_layout Standard
The decaying method of Caudle and Wegman 
\begin_inset CommandInset citation
LatexCommand cite
key "Wegman06"

\end_inset

 likewise lends itself well to a simple recursive updating procedure.
 Specifying a decay rate 0 < 
\begin_inset Formula $\theta$
\end_inset

 < 1, the coefficient at the next time step is given by:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\hat{b}_{j,n+1}=\theta\hat{b}_{j,n}+(1-\theta)\varphi(X_{n+1})
\]

\end_inset


\end_layout

\begin_layout Standard
In both of the recursive updating schemes, it is not necessary to actually
 calculate 
\begin_inset Formula $\varphi_{j,k}(X_{n+1})$
\end_inset

 for many of the basis functions.
 This is since whenever 
\begin_inset Formula $X_{n+1}$
\end_inset

 falls outside of the support of the function, 
\begin_inset Formula $\varphi_{j,k}(X_{n+1})$
\end_inset

 is guaranteed to be equal to zero.
 Thus, by simply checking whether or not a point is supported by a basis
 function before evaluating it we save significant amounts of computation
 time
\begin_inset CommandInset citation
LatexCommand cite
key "Trevino12"

\end_inset

.
 It is also worth noting that for the majority of the wavelets used in estimatio
n, no closed form approximation exists.
 Due to this, a table of values defining the wavelet over its support is
 pre-emptively calculated for each type of wavelet.
 Then interpolation was used among these values to calculate the output
 of the scaling basis and wavelet basis functions at a particular value.
 Profiling of the algorithm's performance puts this interpolation (which
 must be performed here as well as in density calculation) as the bottleneck
 where most of computation time is spent.
 Depending on the granularity of the wavelet table, linear interpolation
 may give satisfactory results while for more widly spaced tables cubic
 interpolation may be necessary to achieve a good approximation of the interpola
ted value.
\end_layout

\begin_layout Subsection
Calculate Density
\change_inserted 236236747 1404748143

\begin_inset CommandInset label
LatexCommand label
name "sub:Calculate-Density"

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard
The computational bottleneck lies with this section.
 The actual calculation of the density is fairly simple.
 For each point 
\change_deleted 236236747 1404740074
x
\change_inserted 236236747 1404740077

\begin_inset Formula $x$
\end_inset


\change_unchanged
 in the support, the density is given by:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(x)=\sum\limits _{k}c_{j_{0},k}\phi_{j_{0},k}(x)+\sum\limits _{j_{0}\leq j}\sum\limits _{k}d_{j,k}\psi_{j,k}(x)
\]

\end_inset


\end_layout

\begin_layout Standard
As it is plainly infeasible to calculate the density at every point in the
 support, a discretization for how frequently to calculate the density is
 selected.
 Empirical tests give that the computational load for updating the coefficients
 given one new data point is roughly equal to that for calculating the density
 of six points.
 A finely discretized density function frequently evaluated can drastically
 slow down the algorithm.
 Likewise, having a large discretization and reducing the frequency at which
 the entire density is calculated both significantly speed up the algorithm.
\end_layout

\begin_layout Subsection
Normalize Density
\begin_inset CommandInset label
LatexCommand label
name "sub:Normalize-Density"

\end_inset


\end_layout

\begin_layout Standard
While the above calculations will give the proper shape for the density,
 they do not yet create a true probability density function.
 Regions sparse in data may have negative densities and the integral over
 the region almost certainly does not sum to unity.
 In order to correct these types of errors, we use the iterative method
 for improving density methods described in 
\begin_inset CommandInset citation
LatexCommand cite
key "Gajek86"

\end_inset

.
 The essence of the method is to first set all negative values in the density
 to zero, then force the function to integrate to one, and continue to repeat
 until the difference between the integral and unity is less than a prespecified
 
\begin_inset Formula $\varepsilon$
\end_inset

 (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Normalization-of-Density"

\end_inset

).
 To be more precise, the algorithm is defined as follows where 
\begin_inset Formula $f_{k}$
\end_inset

 is the 
\begin_inset Formula $k$
\end_inset

th approximation for the true density function and 
\begin_inset Formula $h(x)$
\end_inset

 is the weight function at 
\begin_inset Formula $x$
\end_inset

.
 A uniform weight function was used in our implementation.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Normalization of Density Estimate
\change_inserted 236236747 1404740345

\begin_inset CommandInset label
LatexCommand label
name "alg:Normalization-of-Density"

\end_inset


\change_unchanged

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $f_{0}(\cdot,x^{n})=\hat{f}(\cdot,x^{n}),\quad k=0$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $f_{1}(\cdot,x^{n})=max(0,f_{k}(\cdot,x^{n})),\quad k=1$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $C_{1}=\int_{S}f_{k+1}(t)dt$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
while 
\series default

\begin_inset Formula $\left|C_{k}-1\right|>\epsilon$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $f_{k+1}(\cdot,x^{n})=f_{k}(\cdot,x^{n})-(C_{k}-1)/[h(\cdot)\int_{S}1/h(t)dt$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $f_{k+2}(\cdot,x^{n})=max(0,f_{k+1}(\cdot,x^{n}))$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $C_{k+2}=\int_{S}f_{k+2}(t)dt$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $k=k+2$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Extension to Higher Dimensional Data
\change_inserted 236236747 1404748126

\begin_inset CommandInset label
LatexCommand label
name "sub:Extension-to-Higher dimensions"

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard
In extending the concept of wavelet analysis to higher dimensions, it is
 useful to recall
\begin_inset Formula $\mathbf{V}_{j}$
\end_inset

 which is defined as the space of functions which can be expressed by wavelets
 at the 
\begin_inset Formula $j$
\end_inset

th resolution level.
 Wavelet analysis can then be extended to 
\begin_inset Formula $m$
\end_inset

-dimensions via defining the 
\begin_inset Formula $m$
\end_inset

-dimensional vector space 
\begin_inset Formula $\mathbf{V}_{j}^{m}$
\end_inset

 as the tensor power of the one dimensional 
\begin_inset Formula $\mathbf{V}_{j}$
\end_inset

.
 The scaling basis functions in 
\begin_inset Formula $m$
\end_inset

 dimensional space are then given as:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\phi_{j,k_{1},k_{2}...k_{m}}(x_{1},x_{2},...,x_{m})=\phi_{j,k_{1}}(x_{1})\phi_{j,k_{2}}(x_{2})...\phi_{j,k_{m}}(x_{m})\label{eq:Multidimensional varphi as tensor product}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
From this we can see that it is necessary to have a coefficient 
\begin_inset Formula $b_{j,k_{1},k_{2}...k_{m}}$
\end_inset

 defined across each translate for each dimension of our data.
 Thus, in the 1-dimensional case we needed a vector for the coefficients
 of the scaling basis functions, in the 2-dimensional case we need a matrix
 for those coefficients, and so on in higher dimensions.
 Also important to note, while in the 1-dimensional case we have a 
\begin_inset Formula $\psi$
\end_inset

 and a 
\begin_inset Formula $\phi$
\end_inset

 function, with 2-dimensional wavelets we have the tensor product combinations
 of the 1D functions 
\begin_inset Formula $\phi_{1}\phi_{2}$
\end_inset

, 
\begin_inset Formula $\phi_{1}\psi_{2}$
\end_inset

, 
\begin_inset Formula $\psi_{1}\phi_{2}$
\end_inset

, and 
\begin_inset Formula $\psi_{1}\psi_{2}$
\end_inset

 .
\end_layout

\begin_layout Standard
In the 2-dimensional Matlab prototype, the algorithms discussed work in
 the same manner as previously explained for the 1-dimensional case, with
 the minor change that we add another loop across the translates in the
 second dimension.
 Furthermore, an early implementation of the prototype spent virtually all
 of its time calculating the densities once the coefficients were known.
 In particular, vast amounts of time were spent interpolating amongst the
 
\begin_inset Formula $\varphi$
\end_inset

 tables
\change_inserted 236236747 1404741686
 (
\begin_inset Formula $\varphi$
\end_inset

 represents both scaling and wavelet basis function tables)
\change_unchanged
.
 Since the meshgrid across which we define our density approximation does
 not change, we can initially calculate all of these interpolations which
 we need given the support range and discretization (merely looking up these
 calculations in the future).
 This resulted in speedup of several orders of magnitude, and plotting the
 density function for 2-dimensional data now occurs close to interactive
 speeds.

\change_inserted 236236747 1404741919
 An example of a 2D density plot is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Matlab-2-D-Prototype"

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Matlab2D3peakedGauss.png
	lyxscale 50
	scale 37

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Matlab 2-D Prototype performance at approximating a tri-modal Gaussian mixture
 model
\change_inserted 236236747 1404741837

\begin_inset CommandInset label
LatexCommand label
name "fig:Matlab-2-D-Prototype"

\end_inset


\change_unchanged

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The extension into 3-dimensional data made visualization extremely difficult.
 The choice was made to use isosurfaces which display a 3-dimensional region
 corresponding to a given density.
 However, the isosurfaces for different densities may vary significantly
 and it is difficult to predict the nature of this variability.
 Furthermore, this density is allowed to change throughout time.
 In the end, we decided to allow the user to specify the value of the isocontour
 to display at each update period.
 An example of the display is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Isosurface"

\end_inset

.
 All isosurfaces of a 3-dimensional Gaussian should be spheres, and the
 estimator succeeds on this front.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/isoGauss.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Isosurface of a 3-dimensional uncorrelated Gaussian 
\begin_inset CommandInset label
LatexCommand label
name "fig:Isosurface"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
